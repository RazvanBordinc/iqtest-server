// <auto-generated />
using System;
using IqTest_server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IqTest_server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250518203428_TestMigration2")]
    partial class TestMigration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IqTest_server.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TestResultId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestResultId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("IqTest_server.Models.LeaderboardEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AverageTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BestTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("IQScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<float>("Percentile")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TestsCompleted")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.HasIndex("UserId", "TestTypeId")
                        .IsUnique();

                    b.ToTable("LeaderboardEntries");
                });

            modelBuilder.Entity("IqTest_server.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemorizationTime")
                        .HasColumnType("int");

                    b.Property<string>("MissingIndices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("Pairs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("IqTest_server.Models.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IQScore")
                        .HasColumnType("int");

                    b.Property<float>("Percentile")
                        .HasColumnType("real");

                    b.Property<int>("QuestionsCompleted")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("IqTest_server.Models.TestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("QuestionsCount")
                        .HasColumnType("int");

                    b.Property<string>("TimeLimit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId")
                        .IsUnique();

                    b.ToTable("TestTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "from-blue-500 to-cyan-500 dark:from-blue-600 dark:to-cyan-600",
                            Description = "Analyze patterns, solve equations, and demonstrate mathematical intelligence",
                            Difficulty = "Adaptive",
                            Icon = "Calculator",
                            LongDescription = "Test your ability to recognize numerical patterns, solve complex mathematical puzzles, and think quantitatively under time constraints.",
                            QuestionsCount = 24,
                            TimeLimit = "18 minutes",
                            Title = "Numerical Reasoning",
                            TypeId = "number-logic"
                        },
                        new
                        {
                            Id = 2,
                            Color = "from-emerald-500 to-green-500 dark:from-emerald-600 dark:to-green-600",
                            Description = "Process language, understand relationships between words, and analyze text",
                            Difficulty = "Adaptive",
                            Icon = "BookText",
                            LongDescription = "Challenge your vocabulary knowledge, comprehension of word relationships, and ability to extract meaning from complex language structures.",
                            QuestionsCount = 28,
                            TimeLimit = "20 minutes",
                            Title = "Verbal Intelligence",
                            TypeId = "word-logic"
                        },
                        new
                        {
                            Id = 3,
                            Color = "from-amber-500 to-yellow-500 dark:from-amber-600 dark:to-yellow-600",
                            Description = "Test working memory capacity, recall accuracy, and information retention",
                            Difficulty = "Adaptive",
                            Icon = "Brain",
                            LongDescription = "Evaluate your short-term memory capacity, information retention abilities, and recall accuracy across various cognitive challenges.",
                            QuestionsCount = 20,
                            TimeLimit = "15 minutes",
                            Title = "Memory & Recall",
                            TypeId = "memory"
                        },
                        new
                        {
                            Id = 4,
                            Color = "from-purple-500 to-indigo-500 dark:from-purple-600 dark:to-indigo-600",
                            Description = "Full cognitive assessment combining all major intelligence domains",
                            Difficulty = "Adaptive",
                            Icon = "Sparkles",
                            LongDescription = "A balanced assessment combining multiple cognitive domains for a complete evaluation of general intelligence and cognitive capability.",
                            QuestionsCount = 40,
                            TimeLimit = "35 minutes",
                            Title = "Comprehensive IQ",
                            TypeId = "mixed"
                        });
                });

            modelBuilder.Entity("IqTest_server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IqTest_server.Models.Answer", b =>
                {
                    b.HasOne("IqTest_server.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IqTest_server.Models.TestResult", "TestResult")
                        .WithMany("Answers")
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IqTest_server.Models.User", null)
                        .WithMany("Answers")
                        .HasForeignKey("UserId");

                    b.Navigation("Question");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("IqTest_server.Models.LeaderboardEntry", b =>
                {
                    b.HasOne("IqTest_server.Models.TestType", "TestType")
                        .WithMany("LeaderboardEntries")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IqTest_server.Models.User", "User")
                        .WithMany("LeaderboardEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IqTest_server.Models.Question", b =>
                {
                    b.HasOne("IqTest_server.Models.TestType", "TestType")
                        .WithMany("Questions")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("IqTest_server.Models.TestResult", b =>
                {
                    b.HasOne("IqTest_server.Models.TestType", "TestType")
                        .WithMany("TestResults")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IqTest_server.Models.User", "User")
                        .WithMany("TestResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IqTest_server.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("IqTest_server.Models.TestResult", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("IqTest_server.Models.TestType", b =>
                {
                    b.Navigation("LeaderboardEntries");

                    b.Navigation("Questions");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("IqTest_server.Models.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("LeaderboardEntries");

                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
